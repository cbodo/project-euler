/*

Craig Bodo
Project Euler

Problem 12
Highly Divisible Triangular Number

Description:
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Link: https://projecteuler.net/problem=12

To Run:

g++ problem_12.cpp -o problem_12
./problem_12

*/
#include <iostream>

using namespace std;

int count_divisors(int n) {
    int divisors = 1;
    int count = 0;

    // Remove all factors of 2
    while (n % 2 == 0) {
        n /= 2;
        count++;
    }
    divisors *= (count + 1);

    // Check for odd factors
    for (int i = 3; i <= sqrt(n); i += 2) {
        count = 0;
        while (n % i == 0) {
            n /= i;
            count++;
        }
        divisors *= (count + 1);
    }

    // If n is a prime number greater than 2
    if (n > 2) {
        divisors *= 2;
    }

    return divisors;
}

int main() {
    int divisors = 500;
    int n = 1;
    int triangle;

    while (count_divisors(triangle) < 500) {
        triangle = n * (n + 1) / 2;
        n++;
    }

    cout << "The lowest triangle number with over " << n << " divisors is: " << triangle
         << " with " << count_divisors(triangle) << " divisors." << endl;

    return 0;
}
