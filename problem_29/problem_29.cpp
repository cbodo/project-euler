/*

Project Euler
Problem #29: Distinct Powers
Craig Bodo

Description:
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?


Link: https://projecteuler.net/problem=29

To Run:

g++ problem_29.cpp -o problem_29
./problem_29

*/
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

// Function to multiply two large numbers represented as vectors
vector<int> multiply(vector<int>& num1, vector<int>& num2) {
    int m = num1.size();
    int n = num2.size();
    vector<int> result(m + n, 0);

    for (int i = m - 1; i >= 0; i--) {
        for (int j = n - 1; j >= 0; j--) {
            int mul = num1[i] * num2[j];
            int sum = mul + result[i + j + 1];
            result[i + j] += sum / 10;
            result[i + j + 1] = sum % 10;
        }
    }

    // Remove leading zeros
    while (result.size() > 1 && result[0] == 0) {
        result.erase(result.begin());
    }

    return result;
}

// Function to raise a base to a power
vector<int> power(int base, int exponent) {
    vector<int> result = {1};
    vector<int> base_vec;

    // Convert base to vector representation
    while (base > 0) {
        base_vec.insert(base_vec.begin(), base % 10);
        base /= 10;
    }

    // Perform exponentiation
    for (int i = 0; i < exponent; i++) {
        result = multiply(result, base_vec);
    }

    return result;
}

// Compare two vectors representing large numbers
// Returns true if num1 < num2, false otherwise
bool is_less(const std::vector<int>& num1, const std::vector<int>& num2) {
    // Check if the number of digits differs
    if (num1.size() < num2.size()) return true;
    if (num1.size() > num2.size()) return false;

    // Compare digits from most significant to least significant
    for (size_t i = 0; i < num1.size(); ++i) {
        if (num1[i] < num2[i]) return true;
        if (num1[i] > num2[i]) return false;
    }

    // Numbers are equal
    return false;
}

void binary_insertion(vector<vector<int>>& vec, const vector<int>& item) {
    int left = 0;
    int right = vec.size() - 1;

    // Perform binary search to find the correct position to insert the item
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (vec[mid] == item) {
            return;
        } else if (is_less(vec[mid], item)) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    // If the item does not exist, insert it at the appropriate position
    vec.insert(vec.begin() + left, item);
}

int main() {

    cout << endl << "Project Euler - Problem #29: Distinct Powers" << endl << endl;
    // How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
    int base_start = 2;
    int base_end = 100;
    int exp_start = 2;
    int exp_end = 100;

    vector<vector<int>> distinct_powers;

    for (int base = base_start; base <= base_end; ++base) {
        for (int exp = exp_start; exp <= exp_end; ++exp) {
            vector<int> current = power(base, exp);
            binary_insertion(distinct_powers, current);
        }
    }

    cout << endl << "There are _" << distinct_powers.size() << "_ distinct terms in the sequence generated by a^b for "
         << base_start << " ≤ a ≤ " << base_end << " and " << exp_start << " ≤ b ≤ " << exp_end << "." << endl;

    return 0;
}
