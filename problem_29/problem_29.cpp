/*

Project Euler
Problem #29: Distinct Powers
Craig Bodo

Description:
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?


Link: https://projecteuler.net/problem=29

To Run:

g++ problem_29.cpp -o problem_29
./problem_29

*/
#include <iostream>
#include <vector>

using namespace std;

// Function to find number of distinct terms generated by a^b for 2 ≤ a, b ≤ n
long long find_distinct_terms(int n) {
    // Boolean array to flag collisions (i.e. a power was already encountered)
    vector<bool> encountered(n + 1, false);

    long long distinct_terms = 0;

    // Iterate through all possible bases
    for (int a = 2; a <= n; ++a) {
        long long power = static_cast<long long>(a) * a;
        // Continue checking powers of the current base until exceeding n
        while (power <= n * n) {
            // If the current power has not been encountered before, mark it and increment the count of distinct terms
            if (!encountered[power]) {
                encountered[power] = true;
                distinct_terms++;
            }

            // Increment the power for the next iteration
            power *= a;
        }

    }

    // Subtract number of repeated terms from total
    long long total_terms = static_cast<long long>(n - 1) * (n - 1);
    distinct_terms = total_terms - distinct_terms;

    return distinct_terms;
}

int main() {

    cout << endl << "Project Euler - Problem #29: Distinct Powers" << endl << endl;
    // How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
    int n = 100;

    cout << "Distinct terms in the sequence generated by a^b for 2 ≤ a, b ≤ " << n << ": " << find_distinct_terms(n) << endl;

    return 0;
}
