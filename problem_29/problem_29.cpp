/*

Project Euler
Problem #29: Distinct Powers
Craig Bodo

Description:
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?


Link: https://projecteuler.net/problem=29

To Run:

g++ problem_29.cpp -o problem_29
./problem_29

*/
#include <iostream>
#include <vector>

using namespace std;

// Function to multiply two large numbers represented as vectors
vector<int> multiply(vector<int>& num1, vector<int>& num2) {
    int m = num1.size();
    int n = num2.size();
    vector<int> result(m + n, 0);

    for (int i = m - 1; i >= 0; i--) {
        for (int j = n - 1; j >= 0; j--) {
            int mul = num1[i] * num2[j];
            int sum = mul + result[i + j + 1];
            result[i + j] += sum / 10;
            result[i + j + 1] = sum % 10;
        }
    }

    // Remove leading zeros
    while (result.size() > 1 && result[0] == 0) {
        result.erase(result.begin());
    }

    return result;
}

// Function to raise a base to a power
vector<int> power(int base, int exponent) {
    vector<int> result = {1};
    vector<int> base_vec;

    // Convert base to vector representation
    while (base > 0) {
        base_vec.insert(base_vec.begin(), base % 10);
        base /= 10;
    }

    // Perform exponentiation
    for (int i = 0; i < exponent; i++) {
        result = multiply(result, base_vec);
    }

    return result;
}

bool binary_search(vector<vector<int>> set, vector<int> target) {
    int left = 0;
    int right = set.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (target == set[mid]) {
            return true;
        }
        if (target < set[mid]) {
            right = mid - 1;
        }
        else {
            left = mid + 1;
        }
    }
    return false;
}

int main() {

    cout << endl << "Project Euler - Problem #29: Distinct Powers" << endl << endl;
    // How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
    int start_a = 2;
    int end_a = 100;
    int start_b = 2;
    int end_b = 100;

    // vector<vector<int>> distinct_powers;

    // for (int a = start_a; a <= end_a; ++a) {
    //     for (int b = start_b; b <= end_b; ++b) {
    //         vector<int> result = power(a, b);
    //     }
    // }
    //
    // Example set of vectors
    vector<vector<int>> exampleSet = {
        {1, 3, 5},
        {2, 4, 6},
        {7, 8, 9}
    };

    // Example input vector to search for
    vector<int> inputVector = {2, 3, 6};

    // Perform binary search
    bool found = binary_search(exampleSet, inputVector);

    // Print result
    if (found) {
        cout << "Input vector found in the set." << endl;
    } else {
        cout << "Input vector not found in the set." << endl;
    }

    return 0;
}
